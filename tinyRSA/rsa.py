
from tinyRSA.utils import generate_prime_number, find_coprime, rand_str, mod_inv
import binascii

def generate_keys():
	p = generate_prime_number()
	q = generate_prime_number()
	n = p * q
	t1 = ((p << 1) + (~p))
	t2 = ((q << 1) + (~q))
	t = t1 * t2
	d = find_coprime(t, n)
	e = mod_inv(d, t)
	return (n, e, d)

def encrypt(msg, public_key):
	print('msg', msg)
	ba = bytearray(msg, encoding='utf8')
	msg_bin = ''.join(format(char, 'b') for char in ba)
	print('mb', msg_bin)
	msg_int = int(msg_bin, 2)
	print(msg_int)
	c = pow(msg_int, public_key[1], public_key[0])
	return c

def decrypt(msg, keypair):
	public_key = keypair[:2]
	private_key = keypair[-1]
	decrypted = pow(msg, private_key, public_key[0])
	bitstring = bin(decrypted)
	#n = int('0b0'+bitstring[3:], 2)
	#print(binascii.unhexlify('%x' % decrypted))
	#n = int(bitstring, 2)
	#x = n.to_bytes((n.bit_length() + 7) // 8, 'big').decode()
	#print(x)
	#
	bitstring = bitstring[2:]
	bitstring = -len(bitstring) % 8 * '0' + bitstring
	string_blocks = (bitstring[i:i+8] for i in range(0, len(bitstring), 8))
	string = ''.join(chr(int(char, 2)) for char in string_blocks)
	print(string)
	
	#bitstring = '{0:08b}'.format(decrypted)
	#print(bitstring)
	#x = ''.join(chr(int(bitstring[i:i+8], 4)) for i in range(0, len(bitstring), 8))
	#y = ''.join([chr(int(_, 2)) for _ in bitstring])
	#print(x)
	#print(y)
	#byte_arr = [chr(int(_,2)) for _ in [byte_alloc[i:i+8] for i in range(0,len(byte_alloc), 8)]]
	#print(('%x' % int(byte_alloc, 2)).decode('hex'))
	#print("".join(byte_arr).decode('utf-8'))
	#byte_alloc = byte_alloc.rjust( ((len(byte_alloc) + 7) // 8) * 8, '0' )
	#n = int(bytes(byte_alloc,'utf8'), 10)
	#print(n)
	#return n.to_bytes(((n.bit_length() + 7) // 8), 'big').decode('utf-8')


"""
class Node():
	def __init__(self):
		self.keys = generate_keys()
		self.
"""
def twosided_rsa_test(L=None):
	"""
	node1 = { 
		'keys': generate_keys(),
		'msg': rand_str(L) if L else 'hello'
	}
	"""
	node1 = {'keys': (13689267934752668487464617909158213783586525198460871801978474209956688970651974301864000684957404982343297930075946458751642895426411715724442053396534809364370271098759284754112594094963344896583522081952942486890918895856745597618666043884645541909419400521704089868186160398953364546129918905771003456479162496808624700899783518348809734284376017235911223132356958131574555302616718174091080834825370160552451225728518367003907456388566008001463086577137316761272870642291005870518271256838234199259701743980913266350003039902935855609096164944290230566249202260485971859676526097380423550220685261310691058564581, 6844633967376334243732308954579106891793262599230435900989237104978344485325987150932000342478702491171648965037973229375821447713205857862221026698267404682185135549379642377056297047481672448291761040976471243445459447928372798809333021942322770954709700260852044934093080199476682273064959452885501728239464245900802698528523553308125169202654407474490857620416914791763553863520759200173893063010458919049134734119830089947058666531741101164954588584885076042011187619135237427068232083891814751100021368353727495107642166020318404216762337985980828933935771533306704084294754675343826073037414016360663854710807, 6844633967376334243732308954579106891793262599230435900989237104978344485325987150932000342478702491171648965037973229375821447713205857862221026698267404682185135549379642377056297047481672448291761040976471243445459447928372798809333021942322770954709700260852044934093080199476682273064959452885501728239464245900802698528523553308125169202654407474490857620416914791763553863520759200173893063010458919049134734119830089947058666531741101164954588584885076042011187619135237427068232083891814751100021368353727495107642166020318404216762337985980828933935771533306704084294754675343826073037414016360663854710807), 'msg': 'hello'}
	"""
	node2 = {
		'keys': generate_keys(),
		'msg': rand_str(L) if L else 'bye'
	}
	"""
	node2 = {'keys': (16675545739875707894718851988874318710820313060008520243676248015708014885551008208982186590209781596421531267510206685830772910694027683968674985516714984560447649479046870187087548310964863984179009994135741632375603895956947770686525568798660397150415041052993153823307518445682721180471606318338064809528463258901780659186525770465328153121647616646759714427280332186663043918888089322322560570852345049211277067862784434988996311833514297266022502163383790929644180377417462338365075917801171624131334408149589729955799661805764762122240060183395093495208772270465603790008416961567588391019699063533661177185337, 8337772869937853947359425994437159355410156530004260121838124007854007442775504104491093295104890798210765633755103342915386455347013841984337492758357492280223824739523435093543774155482431992089504997067870816187801947978473885343262784399330198575207520526496576911653759222841360590235803159169032404764096573121866364984441672226052305527662222175274127179065992801861455573065218049800983082044362508627807821188885812534391150193400431106038239446572200439248783474396629307635433330076664111209040208496235549053723732477982114943133833473793703754521521349755388486865594228859632107781251168076862818985019, 8337772869937853947359425994437159355410156530004260121838124007854007442775504104491093295104890798210765633755103342915386455347013841984337492758357492280223824739523435093543774155482431992089504997067870816187801947978473885343262784399330198575207520526496576911653759222841360590235803159169032404764096573121866364984441672226052305527662222175274127179065992801861455573065218049800983082044362508627807821188885812534391150193400431106038239446572200439248783474396629307635433330076664111209040208496235549053723732477982114943133833473793703754521521349755388486865594228859632107781251168076862818985019), 'msg': 'bye'}
	# Side 1
	msg12_encrypted = encrypt(node1['msg'], node2['keys'][:2])
	msg12_descrypted = decrypt(msg12_encrypted, node2['keys'])
	assert msg12_descrypted == node1['msg']
	# Side 2
	msg21_encrypted = encrypt(node2['msg'], node1['keys'][:2])
	msg21_descrypted = decrypt(msg21_encrypted, node1['keys'])
	assert msg21_descrypted == node2['msg']

if __name__ == '__main__':
	twosided_rsa_test()


